@charset "UTF-8";
/**
  * Patrón 7-1
  *
  * Esta es la estructura del patrón 7-1 utilizado en DesafíoLatam
  * para la enseñanza del uso correcto de patrones dentro de CSS y
  * también para la utilización de éste dentro de estructuras de 
  * trabajo colaborativo.
  *
  * @author Cristóbal Domínguez <cristobald@me.com>
  * @since 1.1
  *
  */
/*
 *
 * La mayoría de los proyectos tienen una carpeta vendors/ que contiene
 * todos los archivos CSS de librerías externas y frameworks – Normalize,
 * Bootstrap, jQuery, jQueryUI, Flickity, Flexslider y así sucesivamente.
 * Agregando estos en una carpeta aparte podría ser una buena forma de 
 * decir: “Hey, esto no es mío, no es mi código, no es mi responsabilidad”.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * La carpeta abstracts/ reune todas las herramientas de SASS para el proyecto.
 * Cada variable global, función, mixin o placeholder debería estar aquí dentro.
 * 
 * La regla de oro para esta carpeta es que no deberá imprimir ni una sola línea
 * de código en el momento de la compilación del CSS. Nada como los helpers de Sass.
 * 
 * Cuando se trabaja en un proyecto muy grande con muchos archivos abstracts, podría
 * ser más interesante agruparlos por tópicos en vez de por tipo. Un ejemplo sería
 * crear las instancias typography (_typography.scss), theming (_theming.scss), etc.
 * Cada archivo contendría todos los helpers relacionados a esa instancia: variables, 
 * functions, mixins y placeholders. Hacerlo así podría hacer el código más sencillo de 
 * de mantener, especialmente cuando los archivos empiezan a crecer mucho.
 * 
 * Nota:
 * La carpeta abstracts/ podría llamarse utilities/ o helpers/, dependiendo de lo que
 * se prefiera.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Este archivo contiene las referencias del código boilerplate de tu proyecto.
 * Aquí podrás encontrar referencias al archivo _reset.scss, a las tipografías
 * y probablemente algún otro archivo de estilos que defina de una forma estándard
 * los estilos de elementos usados en HTML.
 *
 *
 * Nota: 
 * Si tu proyecto usa muchas animaciones, deberías considerar agregar dentro de
 * esta carpeta un archivo /_animations.scss que contenga las definiciones de los
 * @keyframes de todas tus animaciones.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
body {
  margin: 0;
  padding: 0;
  font-family: "TTNorms-Regular"; }

/*
 *
 * En sitios/aplicaciones grandes es usual tener distintos temas o 
 * themes implementados. Hay diferentes caminos para lidiar con ese
 * problema, sin embargo uno de los más sencillos, a mi parecer, sería
 * tener cada theme dentro de su carpeta.
 * 
 * Nota:
 * La creación de esta carpeta es muy específica a cada proyecto, 
 * probablemente la mayoría de los sitio/aplicaciones no la necesitarán.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Esta carpeta contiene todo lo que hace relación con el sitio web o la aplicación.
 * Aquí encontrarás los estilos para las partes principales del sitio (header, footer, 
 * navigation, sidebar, etc), el sistema de grillas o incluso los estilos de los formularios
 *
 *
 * Nota:
 * La carpeta layout/ también podría ser llamada partials/, dependiendo de la 
 * preferencia del desarrollador.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
header {
  background-color: #1E1E1E;
  padding: 2em; }

.active {
  -webkit-transform: translateX(-350px);
  -moz-transform: translateX(-350px);
  -o-transform: translateX(-350px);
  -ms-transform: translateX(-350px);
  transform: translateX(-350px);
  box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  -moz-box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  -webkit-box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22); }

.main_nav__open {
  text-align: right; }

.main_nav__openicon {
  color: #FFF;
  font-size: 24px;
  background: transparent;
  border: none;
  cursor: pointer; }

.main_nav__menu {
  position: absolute;
  top: 0;
  right: -350px;
  width: 350px;
  height: 100vh;
  background-color: #5A25B7;
  z-index: 1001;
  overflow: hidden;
  text-align: right;
  -webkit-transition: -webkit-transform 250ms ease-in-out;
  transition: transform 250ms ease-in-out; }

.main_nav__closeicon {
  position: absolute;
  color: #FCD61F;
  font-size: 36px;
  top: 3em;
  left: 1em;
  background: transparent;
  border: none;
  cursor: pointer; }

.main_nav__list {
  display: block;
  position: absolute;
  text-align: left;
  font-family: "TTNorms-ExtraBold-Italic";
  text-transform: uppercase;
  font-size: 40px;
  top: 30vh; }

.main_nav__item {
  display: block;
  line-height: 1em; }

.main_nav__link {
  text-decoration: none;
  color: #FFF; }
  .main_nav__link:hover {
    border-top: 10px solid #FCD61F; }

.main_nav__socialist {
  list-style: none;
  position: absolute;
  bottom: 11em; }

.main_nav__socialitem {
  display: inline-block;
  padding: .2em;
  font-size: 24px; }

.main_nav__socialink {
  color: #FFF; }

.main_footer {
  background-color: #1E1E1E;
  padding: 5em; }
  .main_footer__container {
    display: flex;
    justify-content: space-between; }
  .main_footer__loadmore {
    text-align: center;
    color: #FFF; }
  .main_footer__morelink {
    color: #FFF; }
  .main_footer__rights {
    color: #FFF;
    font-family: "TTNorms-Thin"; }
  .main_footer__socialist {
    list-style: none; }
  .main_footer__socialicon {
    display: inline-block;
    padding: .2rem; }
  .main_footer__socialink {
    color: #FFF; }

.main_container__hero {
  height: 100vh;
  background-color: #2D2B2C; }

.main_container__grid {
  display: grid;
  min-height: 100vh;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  grid-template-rows: repeat(auto-fit, minmax(200px, 1fr));
  grid-auto-rows: 200px;
  grid-auto-flow: row dense;
  grid-gap: 10px;
  padding: 10px;
  background-color: #ddd;
  box-sizing: border-box; }

.main_container__frame {
  padding: 15px;
  color: #FFF; }
  .main_container__frame--1x1 {
    grid-column: span 1;
    grid-row: span 1; }
  .main_container__frame--2x2 {
    grid-column: span 2;
    grid-row: span 2; }
  .main_container__frame--1x2 {
    grid-column: span 1;
    grid-row: span 2; }
  .main_container__frame--2x1 {
    grid-column: span 2;
    grid-row: span 1; }

.hidden {
  display: none; }

.gray {
  background-color: rgba(0, 0, 0, 0.1); }

.tomato {
  background-color: Tomato; }

.orange {
  background-color: Orange; }

.dodgerBlue {
  background-color: DodgerBlue; }

.mediumSeaGreen {
  background-color: MediumSeaGreen; }

.gray {
  background-color: gray; }

.slateBlue {
  background-color: SlateBlue; }

.violet {
  background-color: Violet; }

/*
 * 
 * Esta carpeta fue creada para componentes o módulos pequeños como por ejemplo: 
 * sliders, loaders, widgets, etc. A diferencia de la carpeta layout/ donde almacenaremos
 * los componentes que definan el wireframe del sitio/aplicación, aquí encontraremos
 * componentes que aportarán más contenido que una estructura visual.
 * 
 * Usualmente deberían haber muchos archivos en components/ debido a que los 
 * sitios/aplicaciones se empezaron a crear en base a pequeños módulos de código.
 * 
 * Nota:
 * Esta carpeta también se podría llamar modules/, dependiendo de cómo tu la prefieras.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Si prefieres estilos de páginas específicas, es mejor ponerlos en la carpeta pages/.
 * Por cierto, es común tener estilos muy específicos para cada página, como por ejemplo:
 * home, de ahí la necesidad de crear un archivo _home.scss dentro de pages/.
 * 
 * Nota:
 * Dependiendo del proceso de tu desarrollo, estos archivos podrían ser cargados de forma
 * paralela al archivo de estilos principal, evitando juntarlos con los del estilo principal.
 * Sin embargo es una decisión de cada uno o de cada proyecto.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */

